{"version":3,"sources":["logo.svg","Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Head","react_default","a","createElement","className","Chip","alt","src","CardNumber","props","children","MonthYear","ExpDate","ValidTxt","Holder","VisaMaster","Card","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nbchange","e","target","value","replace","trim","setState","number","dtchange","date","console","log","length","Number","alert","namchange","nam","toUpperCase","state","Card_Head","Card_Chip","Card_CardNumber","Card_MonthYear","Card_ValidTxt","Card_ExpDate","Card_Holder","Card_VisaMaster","type","onChange","maxLength","placeholder","React","Component","App","src_Card_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74db4d85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './Card.css';\n\nconst Head = () => {\n    return <h1 className='cardHead'>CREDIT CARD</h1>\n}\n const Chip = () => {\n    return <img alt='cardChip' src='http://jamesdelaney.ie/dev/chip.png' className='cardChip'/>\n}\n const CardNumber=(props) => {\n    return <h2 className='cardNumber'>{props.children}</h2>\n}\n const MonthYear=()=>{\n    return <span className='month'>MONTH / YEAR</span>\n}\n const ExpDate=(props)=>{\n    return <span className='expDate'>{props.children}</span>\n}\n const ValidTxt=()=>{\n    return <span className='valThru'>VALID THRU > </span>\n}\n const Holder=(props)=>{\n    return <h3 className='holder'>{props.children}</h3>\n}\n const VisaMaster=()=>{\n    return <img className='master' alt='master visa' src='http://2.bp.blogspot.com/-U9vdZ7rRswA/TxC_txd_QvI/AAAAAAAAAAs/nyUWpH6c6Ic/s1600/page.jpg'/>\n}\nclass Card extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      number: '****************',\n      date:'*****',\n      nam:'***************'  \n    }\n  }                \n\n  nbchange=(e)=>{\n    e.target.value = e.target.value.replace(/[^\\dA-Z]/g, '').replace(/(.{4})/g, '$1 ').trim();\n    this.setState({number: e.target.value})\n  }\n\n\n  dtchange=(e)=>{    \n    e.target.value = e.target.value.replace(/[^\\dA-Z/]/g, '')\n    this.setState({date: e.target.value});\n    console.log(e.target.value.length)\n    if (e.target.value.length===2){\n      if (Number(e.target.value)>0 && Number(e.target.value)<=12)\n      e.target.value=e.target.value+'/';\n      else {\n        e.target.value='';this.setState({date: '*****'});\n        alert ('false month');}\n    }\n  }\n\n  namchange=(e)=>{\n    e.target.value = e.target.value.replace(/[\\d]/g, '')\n    this.setState({nam: e.target.value.toUpperCase()})\n  }\n\n  render() { \n    //console.log((this.state.number))\n    return (\n      <div className='final' >\n        <div className='card'>\n          <Head/>\n          <Chip/>\n          <div className='lastLine'>\n            <div className='left'>\n              <CardNumber>\n                  {this.state.number}                \n              </CardNumber>\n              <MonthYear/>\n              <div className='valdt'>\n                <ValidTxt/>\n                <ExpDate>{this.state.date}</ExpDate>\n              </div>\n              <Holder>{this.state.nam}</Holder>\n            </div>\n            <VisaMaster/>\n          </div> \n        </div> \n        <form className='form'>\n          <input type='text' onChange={this.nbchange} className='cardnumber' maxLength=\"19\" placeholder='Card number' />\n          <input type='text' onChange={this.namchange} className='name' maxLength=\"20\" placeholder='Name'/>\n          <input type='text' onChange={this.dtchange} className='date' placeholder='Valid thru' maxLength=\"5\"/>\n        </form>\n      </div>\n      );\n    }\n  } \n\nexport default Card","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Card from './Card/Card';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Card/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}